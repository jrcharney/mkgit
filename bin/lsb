#!/usr/bin/env bash
# lsb - list git branches or contents of a branch

CONFIG_FILE="$HOME/.config/mkgit.conf"
HELPERS_DIR="$HOME/.mkgit/helpers"
EMOJI_HELPER="$HELPERS_DIR/emoji_helper.sh"
NERDFONT_HELPER="$HELPERS_DIR/nerdfont_helper.sh"

[[ -f "$EMOJI_HELPER" ]] && source "$EMOJI_HELPER"
[[ -f "$NERDFONT_HELPER" ]] && source "$NERDFONT_HELPER"

[[ ! -f "$CONFIG_FILE" ]] && emoji_error "Missing configuration file: $CONFIG_FILE. Please run ~/.mkgit/gitconf first." && exit 1
source "$CONFIG_FILE"

usage() {
    cat <<EOF
Usage: lsb [branch-name]
List all branches or show files in a branch.
Options:
  -h, --help    Show this help message
EOF
}

[[ $1 == "-h" || $1 == "--help" ]] && { usage; exit 0; }

current_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null) || {
    emoji_error "Not a git repository."
    exit 1
}

if [[ -z $1 ]]; then
    # List all branches with icons and status
    git for-each-ref --format='%(refname:short)' refs/heads/ | while read -r branch; do
        icon=$(map_nf_icon branch)
        # Check if branch is current
        [[ $branch == "$current_branch" ]] && current_mark="✅" || current_mark="   "
        # Check for uncommitted changes
        git checkout --quiet "$branch"
        if [[ -n $(git status --porcelain 2>/dev/null) ]]; then
            status_mark="⚠️"
        else
            status_mark="✔️"
        fi
        echo "$icon $current_mark $status_mark $branch"
    done
    git checkout --quiet "$current_branch" >/dev/null 2>&1  # Return to original branch
else
    branch="$1"
    if git show-ref --verify --quiet "refs/heads/$branch"; then
        emoji_info "Files in branch '$branch':"
        git ls-tree --name-only -r "$branch"
    else
        emoji_error "Branch '$branch' does not exist."
        exit 1
    fi
fi

